{
	"info": {
		"_postman_id": "f927fabd-bfec-49bf-b392-bac1537037f4",
		"name": "petStore.pet",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20419318"
	},
	"item": [
		{
			"name": "Cadastro do Pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do status de retorno\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validation of body fields \", () => {\r",
							"\r",
							"    if (responseCode.code === 200) {\r",
							"        \r",
							"        // Validação do campo 'id' do response\r",
							"        pm.expect(jsonData.id).to.eql(pm.environment.get(\"idGeral\"));\r",
							"        pm.expect(jsonData.id).not.eql(null);\r",
							"        pm.expect(jsonData.id).not.eql('number');\r",
							"\r",
							"        // Validação do campo 'category > id' do response\r",
							"        pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"idCategory\"));\r",
							"        pm.expect(jsonData.category.id).not.eql(null);\r",
							"        pm.expect(jsonData.category.id).not.eql('number');\r",
							"\r",
							"        // Validação do campo 'category > name' do response\r",
							"        pm.expect(jsonData.category.name).to.eql(pm.environment.get(\"Breed_animal\"));\r",
							"        pm.expect(jsonData.category.name).not.eql(null);\r",
							"        pm.expect(jsonData.category.name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'name' do response\r",
							"        pm.environment.set(\"Name_animal\", jsonData.name);\r",
							"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"Name_animal\"));\r",
							"        pm.expect(jsonData.name).not.eql(null);\r",
							"        pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'photoUrls' do response\r",
							"        pm.environment.set(\"photoUrls\", jsonData.photoUrls);\r",
							"        pm.expect(jsonData.photoUrls).to.eql(pm.environment.get(\"photoUrls\"));\r",
							"        pm.expect(jsonData.photoUrls[0]).not.eql(null);\r",
							"        pm.expect(jsonData.photoUrls[0]).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'tags > id' do response\r",
							"        pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"idTags\"));\r",
							"        pm.expect(jsonData.tags[0].id).not.eql(null);\r",
							"        pm.expect(jsonData.tags[0].id).not.eql('number');\r",
							"        \r",
							"        // Validação do campo 'tags > name' do response\r",
							"        pm.expect(jsonData.tags[0].name).not.eql(null);\r",
							"        pm.expect(jsonData.tags[0].name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'status' do response\r",
							"        pm.expect(jsonData.status).to.eql(\"available\");\r",
							"        pm.expect(jsonData.status).not.eql(null);\r",
							"        pm.expect(jsonData.status).to.be.a(\"string\");   \r",
							"    }\r",
							"})\r",
							"\r",
							"// Validação que o body não pode ser igual nulo\r",
							"pm.test(\"Validation of body fields is not equal null \", () => {\r",
							"    pm.expect(jsonData).not.eql(null);\r",
							"})\r",
							"\r",
							"// Validação do tempo de retorno do response\r",
							"pm.test(\"Response time is less then 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// Salvar o status do Response em Variavel Global para utilizar em algum outro teste\r",
							"pm.globals.set(\"status\", jsonData.status);\r",
							"\r",
							"// JsonSchema\r",
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"minProperties\": 1,\r",
							"    \"maxProperties\": 6,\r",
							"    \"title\": \"Json Schema - PetStore\",\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"category\",\r",
							"        \"name\",\r",
							"        \"photoUrls\",\r",
							"        \"tags\",\r",
							"        \"status\",\r",
							"    ],\r",
							"    \"additionalProperties\": false,\r",
							"\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"minimum\": 1,\r",
							"            \"maximum\":99,\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 2,\r",
							"            \"multipleOf\" : 1,\r",
							"        },\r",
							"        \"category\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"name\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"minimum\": 1,\r",
							"                    \"maximum\":99,\r",
							"                    \"minLength\": 1,\r",
							"                    \"maxLength\": 2,\r",
							"                    \"multipleOf\" : 1,\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"minLength\": 1,\r",
							"                    \"maxLength\": 3,\r",
							"                    \"const\": \"Dog\"\r",
							"                }\r",
							"            },\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 10,\r",
							"        },\r",
							"        \"photoUrls\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"string\",\r",
							"                \"minLength\": 1,\r",
							"                \"maxLength\": 50,\r",
							"                \"format\": \"url\",\r",
							"            },\r",
							"        },\r",
							"        \"tags\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"name\"\r",
							"                ],                \r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"integer\",\r",
							"                        \"minimum\": 1,\r",
							"                        \"maximum\":99,\r",
							"                        \"minLength\": 1,\r",
							"                        \"maxLength\": 2,\r",
							"                        \"multipleOf\" : 1,\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"minLength\": 1,\r",
							"                        \"maxLength\": 6,\r",
							"                    }\r",
							"                },\r",
							"            },\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 10,\r",
							"        }\r",
							"    },\r",
							"}\r",
							"\r",
							"// Validação da estrutura do response\r",
							"pm.test(\"Validation of the response body structure with JsonSchema\", () => {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gerar número randômico para o Id Geral \r",
							"var idGeral = randInt(1, 99);\r",
							"pm.environment.set(\"idGeral\", idGeral);\r",
							"function randInt(min, max) {\r",
							"    return Math.round((Math.random() * Math.abs(max - min)) + min)\r",
							"}\r",
							"\r",
							"// Gerar número randômico para o Id Category \r",
							"var idCategory = randInt(1, 99);\r",
							"pm.environment.set(\"idCategory\", idCategory);\r",
							"function randInt(min, max) {\r",
							"    return Math.round((Math.random() * Math.abs(max - min)) + min)\r",
							"}\r",
							"\r",
							"// Gerar número randômico para o Id Tags\r",
							"var idTags = randInt(1, 99);\r",
							"pm.environment.set(\"idTags\", idTags);\r",
							"function randInt(min, max) {\r",
							"    return Math.round((Math.random() * Math.abs(max - min)) + min)\r",
							"}\r",
							"\r",
							"// Gerar nome aleatório\r",
							"pm.environment.set(\"Name_animal\", \"{{$randomFirstName}}\");\r",
							"\r",
							"// Gerar URL de foto de animal aleatório\r",
							"pm.environment.set(\"photoUrls\", \"{{$randomAnimalsImage}}\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{idGeral}},\r\n  \"category\": {\r\n    \"id\": {{idCategory}},\r\n    \"name\": \"{{Breed_animal}}\"\r\n  },\r\n  \"name\": \"{{Name_animal}}\",\r\n  \"photoUrls\": [\r\n    \"{{photoUrls}}\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{idTags}},\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/v2/pet",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualização do Cadastro do Pet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gerar número randômico para o Id Category \r",
							"var idCategoryUpdate = randInt(1, 99);\r",
							"pm.environment.set(\"idCategoryUpdate\", idCategoryUpdate);\r",
							"function randInt(min, max) {\r",
							"    return Math.round((Math.random() * Math.abs(max - min)) + min)\r",
							"}\r",
							"\r",
							"// Gerar número randômico para o Id Tags\r",
							"var idTagsUpdate = randInt(1, 99);\r",
							"pm.environment.set(\"idTagsUpdate\", idTagsUpdate);\r",
							"function randInt(min, max) {\r",
							"    return Math.round((Math.random() * Math.abs(max - min)) + min)\r",
							"}\r",
							"\r",
							"// Gerar nome aleatório\r",
							"pm.environment.set(\"Name_animal_update\", \"{{$randomFirstName}}\");\r",
							"\r",
							"// Gerar URL de foto de animal aleatório\r",
							"pm.environment.set(\"photoUrls_update\", \"{{$randomCatsImage}}\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação do status de retorno\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validation of body fields \", () => {\r",
							"\r",
							"    if (responseCode.code === 200) {\r",
							"        \r",
							"        // Validação do campo 'id' do response\r",
							"        pm.expect(jsonData.id).to.eql(pm.environment.get(\"idGeral\"));\r",
							"        pm.expect(jsonData.id).not.eql(null);\r",
							"        pm.expect(jsonData.id).not.eql('number');\r",
							"\r",
							"        // Validação do campo 'category > id' do response\r",
							"        pm.expect(jsonData.category.id).to.eql(pm.environment.get(\"idCategoryUpdate\"));\r",
							"        pm.expect(jsonData.category.id).not.eql(null);\r",
							"        pm.expect(jsonData.category.id).not.eql('number');\r",
							"\r",
							"        // Validação do campo 'category > name' do response\r",
							"        pm.expect(jsonData.category.name).to.eql(pm.environment.get(\"Breed_animal_update\"));\r",
							"        pm.expect(jsonData.category.name).not.eql(null);\r",
							"        pm.expect(jsonData.category.name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'name' do response\r",
							"        pm.environment.set(\"Name_animal_update\", jsonData.name);\r",
							"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"Name_animal_update\"));\r",
							"        pm.expect(jsonData.name).not.eql(null);\r",
							"        pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'photoUrls' do response\r",
							"        pm.environment.set(\"photoUrls_update\", jsonData.photoUrls);\r",
							"        pm.expect(jsonData.photoUrls).to.eql(pm.environment.get(\"photoUrls_update\"));\r",
							"        pm.expect(jsonData.photoUrls[0]).not.eql(null);\r",
							"        pm.expect(jsonData.photoUrls[0]).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'tags > id' do response\r",
							"        pm.expect(jsonData.tags[0].id).to.eql(pm.environment.get(\"idTagsUpdate\"));\r",
							"        pm.expect(jsonData.tags[0].id).not.eql(null);\r",
							"        pm.expect(jsonData.tags[0].id).not.eql('number');\r",
							"        \r",
							"        // Validação do campo 'tags > name' do response\r",
							"        pm.expect(jsonData.tags[0].name).not.eql(null);\r",
							"        pm.expect(jsonData.tags[0].name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'status' do response\r",
							"        pm.expect(jsonData.status).to.eql(\"available\");\r",
							"        pm.expect(jsonData.status).not.eql(null);\r",
							"        pm.expect(jsonData.status).to.be.a(\"string\");   \r",
							"    }\r",
							"})\r",
							"\r",
							"// Validação que o body não pode ser igual nulo\r",
							"pm.test(\"Validation of body fields is not equal null \", () => {\r",
							"    pm.expect(jsonData).not.eql(null);\r",
							"})\r",
							"\r",
							"// Validação do tempo de retorno do response\r",
							"pm.test(\"Response time is less then 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// JsonSchema\r",
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"minProperties\": 1,\r",
							"    \"maxProperties\": 6,\r",
							"    \"title\": \"Json Schema - PetStore\",\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"category\",\r",
							"        \"name\",\r",
							"        \"photoUrls\",\r",
							"        \"tags\",\r",
							"        \"status\",\r",
							"    ],\r",
							"    \"additionalProperties\": false,\r",
							"\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"minimum\": 1,\r",
							"            \"maximum\":99,\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 2,\r",
							"            \"multipleOf\" : 1,\r",
							"        },\r",
							"        \"category\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"name\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"minimum\": 1,\r",
							"                    \"maximum\":99,\r",
							"                    \"minLength\": 1,\r",
							"                    \"maxLength\": 2,\r",
							"                    \"multipleOf\" : 1,\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"minLength\": 1,\r",
							"                    \"maxLength\": 3,\r",
							"                    \"const\": \"Cat\"\r",
							"                }\r",
							"            },\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 10,\r",
							"        },\r",
							"        \"photoUrls\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"string\",\r",
							"                \"minLength\": 1,\r",
							"                \"maxLength\": 50,\r",
							"            },\r",
							"        },\r",
							"        \"tags\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"name\"\r",
							"                ],                \r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"integer\",\r",
							"                        \"minimum\": 1,\r",
							"                        \"maximum\":99,\r",
							"                        \"minLength\": 1,\r",
							"                        \"maxLength\": 2,\r",
							"                        \"multipleOf\" : 1,\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"minLength\": 1,\r",
							"                        \"maxLength\": 6,\r",
							"                    }\r",
							"                },\r",
							"            },\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 10,\r",
							"        }\r",
							"    },\r",
							"}\r",
							"\r",
							"// Validação da estrutura do response\r",
							"pm.test(\"Validation of the response body structure with JsonSchema\", () => {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Rodar os testes com Workflow\r",
							"postman.setNextRequest(\"Consultar Pet\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{idGeral}},\r\n  \"category\": {\r\n    \"id\": {{idCategoryUpdate}},\r\n    \"name\": \"{{Breed_animal_update}}\"\r\n  },\r\n  \"name\": \"{{Name_animal_update}}\",\r\n  \"photoUrls\": [\r\n    \"{{photoUrls_update}}\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{idTagsUpdate}},\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/v2/pet",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consultar Pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação múltipla do status de retorno\r",
							"pm.test(\"Status code is 200 or 404\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Validation of body fields with status 200 \", () => {\r",
							"\r",
							"    if (responseCode.code === 200) {\r",
							"\r",
							"        // Validação do campo 'id' do response\r",
							"        pm.expect(jsonData.id).to.eql(pm.environment.get(\"idGeral\"));\r",
							"        pm.expect(jsonData.id).not.eql(null);\r",
							"        pm.expect(jsonData.id).not.eql('number');\r",
							"\r",
							"        // Validação do campo 'category > id' do response contemplando os status 200 e 404\r",
							"        pm.expect(jsonData.category.id).to.be.oneOf([pm.environment.get('idCategoryUpdate'), pm.environment.get('idCategory')]);\r",
							"        pm.expect(jsonData.category.id).not.eql(null);\r",
							"        pm.expect(jsonData.category.id).not.eql('number');\r",
							"\r",
							"        // Validação do campo 'category > name' do response contemplando os status 200 e 404\r",
							"        pm.expect(jsonData.category.name).to.be.oneOf([pm.environment.get(\"Breed_animal_update\"), pm.environment.get(\"Breed_animal\")]);\r",
							"        pm.expect(jsonData.category.name).not.eql(null);\r",
							"        pm.expect(jsonData.category.name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'name' do response\r",
							"        pm.environment.set(\"Name_animal_update\", jsonData.name);\r",
							"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"Name_animal_update\"));\r",
							"        pm.expect(jsonData.name).not.eql(null);\r",
							"        pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'photoUrls' do response\r",
							"        pm.environment.set(\"photoUrls_update\", jsonData.photoUrls);\r",
							"        pm.expect(jsonData.photoUrls).to.eql(pm.environment.get(\"photoUrls_update\"));\r",
							"        pm.expect(jsonData.photoUrls[0]).not.eql(null);\r",
							"        pm.expect(jsonData.photoUrls[0]).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'tags > id' do response\r",
							"        pm.expect(jsonData.tags[0].id).to.be.oneOf([pm.environment.get(\"idTagsUpdate\"),pm.environment.get(\"idTags\")]);\r",
							"        pm.expect(jsonData.tags[0].id).not.eql(null);\r",
							"        pm.expect(jsonData.tags[0].id).not.eql('number');\r",
							"\r",
							"        // Validação do campo 'tags > name' do response\r",
							"        pm.expect(jsonData.tags[0].name).not.eql(null);\r",
							"        pm.expect(jsonData.tags[0].name).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'status' do response\r",
							"        pm.expect(jsonData.status).to.eql(\"available\");\r",
							"        pm.expect(jsonData.status).not.eql(null);\r",
							"        pm.expect(jsonData.status).to.be.a(\"string\");   \r",
							"    }\r",
							"})\r",
							"\r",
							"pm.test(\"Validation of body fields with status 404 \", () => {\r",
							"    \r",
							"    if (responseCode.code === 404) {\r",
							"\r",
							"        // Validação do campo 'code' do response\r",
							"        pm.expect(jsonData.code).to.eql(1);\r",
							"        pm.expect(jsonData.code).not.eql(null);\r",
							"        pm.expect(jsonData.code).not.eql('number');\r",
							"\r",
							"        // Validação do campo 'type' do response\r",
							"        pm.expect(jsonData.type).to.eql(\"error\");\r",
							"        pm.expect(jsonData.type).not.eql(null);\r",
							"        pm.expect(jsonData.type).not.eql(\"string\");\r",
							"\r",
							"        // Validação do campo 'message' do response\r",
							"        pm.expect(jsonData.message).to.eql(\"Pet not found\");\r",
							"        pm.expect(jsonData.message).not.eql(null);\r",
							"        pm.expect(jsonData.message).not.eql(\"string\");\r",
							"    }\r",
							"})\r",
							"\r",
							"// Validação que o body não pode ser igual nulo\r",
							"pm.test(\"Validation of body fields is not equal null \", () => {\r",
							"    pm.expect(jsonData).not.eql(null);\r",
							"})\r",
							"\r",
							"// Validação do tempo de retorno do response\r",
							"pm.test(\"Response time is less then 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// JsonSchema com status 200\r",
							"const schemaOne = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"minProperties\": 1,\r",
							"    \"maxProperties\": 6,\r",
							"    \"title\": \"Json Schema - PetStore\",\r",
							"    \"required\": [\r",
							"        \"id\",\r",
							"        \"category\",\r",
							"        \"name\",\r",
							"        \"photoUrls\",\r",
							"        \"tags\",\r",
							"        \"status\",\r",
							"    ],\r",
							"    \"additionalProperties\": false,\r",
							"\r",
							"    \"properties\": {\r",
							"        \"id\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"minimum\": 1,\r",
							"            \"maximum\":99,\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 2,\r",
							"            \"multipleOf\" : 1,\r",
							"        },\r",
							"        \"category\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"id\",\r",
							"                \"name\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"integer\",\r",
							"                    \"minimum\": 1,\r",
							"                    \"maximum\":99,\r",
							"                    \"minLength\": 1,\r",
							"                    \"maxLength\": 2,\r",
							"                    \"multipleOf\" : 1,\r",
							"                },\r",
							"                \"name\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"minLength\": 1,\r",
							"                    \"maxLength\": 3,\r",
							"                    \"if\": {\r",
							"                        \"properties\": { \"name\": { \"const\": \"Dog\" } }\r",
							"                        },\r",
							"                        \"else\": {\r",
							"                            \"properties\": { \"name\": { \"const\": \"Cat\" } }\r",
							"                        }\r",
							"                }\r",
							"            },\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 10,\r",
							"        },\r",
							"        \"photoUrls\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"string\",\r",
							"                \"minLength\": 1,\r",
							"                \"maxLength\": 50,\r",
							"            },\r",
							"        },\r",
							"        \"tags\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"required\": [\r",
							"                    \"id\",\r",
							"                    \"name\"\r",
							"                ],                \r",
							"                \"properties\": {\r",
							"                    \"id\": {\r",
							"                        \"type\": \"integer\",\r",
							"                        \"minimum\": 1,\r",
							"                        \"maximum\":99,\r",
							"                        \"minLength\": 1,\r",
							"                        \"maxLength\": 2,\r",
							"                        \"multipleOf\" : 1,\r",
							"                    },\r",
							"                    \"name\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"minLength\": 1,\r",
							"                        \"maxLength\": 6,\r",
							"                    }\r",
							"                },\r",
							"            },\r",
							"        },\r",
							"        \"status\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 10,\r",
							"        }\r",
							"    },\r",
							"}\r",
							"\r",
							"// JsonSchema com status 404\r",
							"const schemaTwo = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"Json Schema - PetStore\",\r",
							"    \"required\": [\r",
							"        \"code\",\r",
							"        \"type\",\r",
							"        \"message\"\r",
							"    ],\r",
							"    \"additionalProperties\": false,\r",
							"\r",
							"    \"properties\": {\r",
							"        \"code\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"minimum\": 1,\r",
							"            \"maximum\":9,\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 1,\r",
							"        },\r",
							"        \"type\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 5,\r",
							"        },\r",
							"        \"message\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 13,\r",
							"        }\r",
							"    },\r",
							"}\r",
							"\r",
							"// Validação da estrutura do response\r",
							"pm.test(\"Validation of the response body structure with JsonSchema\", () => {\r",
							"\r",
							"    if (responseCode.code === 200) {\r",
							"        pm.response.to.have.jsonSchema(schemaOne);\r",
							"    } else{\r",
							"        pm.response.to.have.jsonSchema(schemaTwo);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Rodar os testes com Workflow\r",
							"if (responseCode.code === 200) {\r",
							"    postman.setNextRequest(\"Exclusão do Cadastro do Pet\");\r",
							"} else {\r",
							"    postman.setNextRequest(null)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base-url}}/v2/pet/{{idGeral}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v2",
						"pet",
						"{{idGeral}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Exclusão do Cadastro do Pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validação múltipla do status de retorno\r",
							"pm.test(\"Status code is 200 or 404\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
							"});\r",
							"\r",
							"pm.test(\"Validation of body fields with status 200 or 404 \", () => {\r",
							"\r",
							"    if (responseCode.code === 200) {\r",
							"        \r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"        // Validação do campo 'code' do response\r",
							"        pm.expect(jsonData.code).to.equals(200);\r",
							"        pm.expect(jsonData.code).not.equal(null);\r",
							"\r",
							"        // Validação do campo 'type' do response\r",
							"        pm.expect(jsonData.type).to.equals(\"unknown\");\r",
							"        pm.expect(jsonData.type).to.be.a(\"string\");\r",
							"\r",
							"        // Validação do campo 'message' do response\r",
							"        pm.expect(jsonData.message).to.eql(pm.environment.get(\"idGeral\").toString());\r",
							"        pm.expect(jsonData.message).not.equal(null);       \r",
							"    }\r",
							"        \r",
							"    else if (responseCode.code === 404) {\r",
							"\r",
							"    var jsonData = (_.isEmpty(responseBody));\r",
							"\r",
							"        // Validação do response vazio com status 404\r",
							"        pm.expect(jsonData).to.be.true\r",
							"    }\r",
							"})\r",
							"\r",
							"// Validação do tempo de retorno do response\r",
							"pm.test(\"Response time is less then 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"\r",
							"// JsonSchema\r",
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"Json Schema - PetStore\",\r",
							"    \"required\": [\r",
							"        \"code\",\r",
							"        \"type\",\r",
							"        \"message\"\r",
							"    ],\r",
							"    \"additionalProperties\": false,\r",
							"    \r",
							"    \"properties\": {\r",
							"        \"code\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"minimum\": 1,\r",
							"            \"maximum\":200,\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 3,\r",
							"        },\r",
							"        \"type\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 7,\r",
							"        },\r",
							"        \"message\": {\r",
							"            \"type\": \"string\",\r",
							"            \"minLength\": 1,\r",
							"            \"maxLength\": 2,\r",
							"        }\r",
							"    },\r",
							"}\r",
							"\r",
							"// Validação da estrutura do response\r",
							"pm.test(\"Validation of the response body structure with JsonSchema\", () => {\r",
							"\r",
							"    if (responseCode.code === 200) {\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Rodar os testes com Workflow\r",
							"if (responseCode.code === 200) {\r",
							"    postman.setNextRequest(\"Exclusão do Cadastro do Pet\");\r",
							"} else {\r",
							"    postman.setNextRequest(\"Consultar Pet\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base-url}}/v2/pet/{{idGeral}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"v2",
						"pet",
						"{{idGeral}}"
					]
				}
			},
			"response": []
		}
	]
}